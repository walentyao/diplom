version: '3.8'

services:
  app:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=error_tracking
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - LOG_LEVEL=info
      - ALERT_CHECK_INTERVAL=60000
      - ALERT_BATCH_SIZE=1000
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-example@example.com}
      - SMTP_PASS=${SMTP_PASS:-secret}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_change_in_production}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-your_telegram_bot_token}
    depends_on:
      - postgres
    restart: always

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - app
    restart: always

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=error_tracking
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: